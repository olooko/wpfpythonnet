<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton Focusable="false" ClickMode="Press" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Grid>
                                                    <Border x:Name="Border" CornerRadius="4" BorderThickness="1" BorderBrush="{DynamicResource ColorNeutralStroke1Brush}" Background="{DynamicResource ColorNeutralBackground1Brush}">
                                                        <Path Margin="0,0,9,0" Stroke="{DynamicResource ColorNeutralStroke1Brush}" VerticalAlignment="Center" HorizontalAlignment="Right" Data="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708" />
                                                    </Border>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter TargetName="Border" Property="Border.BorderBrush" Value="{DynamicResource ColorNeutralStroke1HoverBrush}" />
                                                        <Setter TargetName="Border" Property="Border.Background" Value="{DynamicResource ColorNeutralBackground1HoverBrush}" />
                                                    </Trigger>
                                                    <Trigger Property="IsPressed" Value="True">
                                                        <Setter TargetName="Border" Property="Border.BorderBrush" Value="{DynamicResource ColorNeutralStroke1PressedBrush}" />
                                                        <Setter TargetName="Border" Property="Border.Background" Value="{DynamicResource ColorNeutralBackground1PressedBrush}" />
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter TargetName="Border" Property="Border.BorderBrush" Value="{DynamicResource ColorNeutralStrokeDisabledBrush}" />
                                                        <Setter TargetName="Border" Property="Border.Background" Value="{DynamicResource ColorNeutralBackgroundDisabledBrush}" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>
                        <ContentPresenter Margin="9,9,35,9" HorizontalAlignment="Left" VerticalAlignment="Center" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" TextBlock.Foreground="{DynamicResource ColorNeutralForeground1Brush}" />
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="None" Placement="Bottom">
                            <Border BorderThickness="1" Margin="15" CornerRadius="4" Background="{DynamicResource ColorNeutralBackground1Brush}" BorderBrush="{DynamicResource ColorNeutralStroke3Brush}" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border.Effect>
                                    <DropShadowEffect Direction="270" ShadowDepth="4" BlurRadius="12" Color="{DynamicResource ColorNeutralShadowAmbient}" />
                                </Border.Effect>
                                <ScrollViewer>
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Border" Margin="4" Padding="9" CornerRadius="4">
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="Background" Value="Transparent"/>
                            </Style>
                        </Border.Style>
                        <ContentPresenter HorizontalAlignment="Left" TextBlock.Foreground="{DynamicResource ColorNeutralForeground1Brush}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Border.Background" Value="{DynamicResource ColorNeutralBackground1HoverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Border.Background" Value="{DynamicResource ColorNeutralBackground1SelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Border.Background" Value="{DynamicResource ColorNeutralBackgroundDisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Border" Padding="1" BorderThickness="1" CornerRadius="4" BorderBrush="{DynamicResource ColorNeutralStroke1Brush}" Background="{DynamicResource ColorNeutralBackground1Brush}">
                        <ScrollViewer Margin="0" Focusable="false">
                            <StackPanel Margin="2" IsItemsHost="True" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Border.Background" Value="{DynamicResource ColorNeutralBackgroundDisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Border" Padding="8" Background="Transparent" CornerRadius="6">
                        <ContentPresenter TextBlock.Foreground="{DynamicResource ColorNeutralForeground1Brush}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Border.Background" Value="{DynamicResource ColorNeutralBackground1HoverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Border.Background" Value="{DynamicResource ColorNeutralBackground1SelectedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Border.Background" Value="{DynamicResource ColorNeutralBackgroundDisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ScrollBar}">
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="18" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid>
                                <Border CornerRadius="2" Background="Transparent" />
                                <Track x:Name="PART_Track" IsDirectionReversed="False">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="ScrollBar.PageLeftCommand">
                                            <RepeatButton.Style>
                                                <Style TargetType="{x:Type RepeatButton}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                <Border Background="Transparent" />
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </RepeatButton.Style>
                                        </RepeatButton>
                                    </Track.DecreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Margin="0,2,0,0">
                                            <Thumb.Style>
                                                <Style TargetType="{x:Type Thumb}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                                <Border CornerRadius="4">
                                                                    <Border.Background>
                                                                        <SolidColorBrush x:Name="Background" Color="{DynamicResource ColorNeutralStroke1}" />
                                                                    </Border.Background>
                                                                    <VisualStateManager.VisualStateGroups>
                                                                        <VisualStateGroup x:Name="CommonStates">
                                                                            <VisualState x:Name="Normal" />
                                                                            <VisualState x:Name="MouseOver">
                                                                                <Storyboard>
                                                                                    <ColorAnimation Duration="0:0:0.0" Storyboard.TargetName="Background" Storyboard.TargetProperty="Color" To="{DynamicResource ColorNeutralStroke1Hover}" />
                                                                                </Storyboard>
                                                                            </VisualState>
                                                                            <VisualState x:Name="Pressed">
                                                                                <Storyboard>
                                                                                    <ColorAnimation Duration="0:0:0.0" Storyboard.TargetName="Background" Storyboard.TargetProperty="Color" To="{DynamicResource ColorNeutralStroke1Pressed}" />
                                                                                </Storyboard>
                                                                            </VisualState>
                                                                            <VisualState x:Name="Disabled" />
                                                                        </VisualStateGroup>
                                                                    </VisualStateManager.VisualStateGroups>
                                                                </Border>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </Thumb.Style>
                                        </Thumb>
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="ScrollBar.PageRightCommand">
                                            <RepeatButton.Style>
                                                <Style TargetType="{x:Type RepeatButton}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                <Border Background="Transparent" />
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </RepeatButton.Style>
                                        </RepeatButton>
                                    </Track.IncreaseRepeatButton>
                                </Track>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="18" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid>
                                <Border CornerRadius="4" Background="Transparent" />
                                <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="ScrollBar.PageUpCommand">
                                            <RepeatButton.Style>
                                                <Style TargetType="{x:Type RepeatButton}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                <Border Background="Transparent" />
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </RepeatButton.Style>
                                        </RepeatButton>
                                    </Track.DecreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Margin="2,0,0,0">
                                            <Thumb.Style>
                                                <Style TargetType="{x:Type Thumb}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                                <Border CornerRadius="4">
                                                                    <Border.Background>
                                                                        <SolidColorBrush x:Name="Background" Color="{DynamicResource ColorNeutralStroke1}" />
                                                                    </Border.Background>
                                                                    <VisualStateManager.VisualStateGroups>
                                                                        <VisualStateGroup x:Name="CommonStates">
                                                                            <VisualState x:Name="Normal" />
                                                                            <VisualState x:Name="MouseOver">
                                                                                <Storyboard>
                                                                                    <ColorAnimation Duration="0:0:0.0" Storyboard.TargetName="Background" Storyboard.TargetProperty="Color" To="{DynamicResource ColorNeutralStroke1Hover}" />
                                                                                </Storyboard>
                                                                            </VisualState>
                                                                            <VisualState x:Name="Pressed">
                                                                                <Storyboard>
                                                                                    <ColorAnimation Duration="0:0:0.0" Storyboard.TargetName="Background" Storyboard.TargetProperty="Color" To="{DynamicResource ColorNeutralStroke1Pressed}" />
                                                                                </Storyboard>
                                                                            </VisualState>
                                                                            <VisualState x:Name="Disabled" />
                                                                          </VisualStateGroup>
                                                                    </VisualStateManager.VisualStateGroups>
                                                                </Border>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </Thumb.Style>
                                        </Thumb>
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="ScrollBar.PageDownCommand">
                                            <RepeatButton.Style>
                                                <Style TargetType="{x:Type RepeatButton}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                <Border Background="Transparent" />
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </RepeatButton.Style>
                                        </RepeatButton>
                                    </Track.IncreaseRepeatButton>
                                </Track>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border BorderThickness="0">
                            <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" />
                        </Border>
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                   Grid.Column="1"
                                   Grid.Row="0"
                                   Value="{TemplateBinding VerticalOffset}"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                                   Orientation="Horizontal"
                                   Grid.Column="0"
                                   Grid.Row="1"
                                   Value="{TemplateBinding HorizontalOffset}"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="9" />
        <Setter Property="Foreground" Value="{DynamicResource ColorNeutralForeground1Brush}" />
        <Setter Property="Background" Value="{DynamicResource ColorNeutralBackground1Brush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ColorNeutralStroke1Brush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="4" 
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ColorNeutralForeground1HoverBrush}" />
                <Setter Property="Background" Value="{DynamicResource ColorNeutralBackground1HoverBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ColorNeutralStroke1HoverBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ColorNeutralForeground1PressedBrush}" />
                <Setter Property="Background" Value="{DynamicResource ColorNeutralBackground1PressedBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ColorNeutralStroke1PressedBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ColorNeutralForegroundDisabledBrush}" />
                <Setter Property="Background" Value="{DynamicResource ColorNeutralBackgroundDisabledBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ColorNeutralStrokeDisabledBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BrandType1Button" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Foreground" Value="{DynamicResource ColorNeutralForegroundOnBrandBrush}" />
        <Setter Property="Background" Value="{DynamicResource ColorBrandBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ColorNeutralForegroundOnBrandBrush}" />
                <Setter Property="Background" Value="{DynamicResource ColorBrandBackgroundHoverBrush}" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ColorNeutralForegroundOnBrandBrush}" />
                <Setter Property="Background" Value="{DynamicResource ColorBrandBackgroundPressedBrush}" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ColorNeutralForegroundDisabledBrush}" />
                <Setter Property="Background" Value="{DynamicResource ColorNeutralBackgroundDisabledBrush}" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BrandType2Button" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Foreground" Value="{DynamicResource ColorBrandForeground2Brush}" />
        <Setter Property="Background" Value="{DynamicResource ColorBrandBackground2Brush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ColorBrandStroke2Brush}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ColorBrandForeground2HoverBrush}" />
                <Setter Property="Background" Value="{DynamicResource ColorBrandBackground2HoverBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ColorBrandStroke2HoverBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ColorBrandForeground2PressedBrush}" />
                <Setter Property="Background" Value="{DynamicResource ColorBrandBackground2PressedBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ColorBrandStroke2PressedBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LinkButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Foreground" Value="{DynamicResource ColorBrandForegroundLinkBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ColorBrandForegroundLinkHoverBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ColorBrandForegroundLinkPressedBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ColorNeutralForegroundDisabledBrush}" />
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{DynamicResource ColorNeutralForeground1Brush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="Border" CornerRadius="4" Padding="4,7,4,7" BorderThickness="1" BorderBrush="{DynamicResource ColorNeutralStroke1Brush}">
                        <Grid>
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" Background="{DynamicResource ColorNeutralBackground1Brush}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="Border.BorderBrush" Value="{DynamicResource ColorBrandStroke1Brush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="Foreground" Value="{DynamicResource ColorNeutralForeground1Brush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="Border" CornerRadius="4" Padding="4,7,4,7" BorderThickness="1" BorderBrush="{DynamicResource ColorNeutralStroke1Brush}">
                        <Grid>
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" Background="{DynamicResource ColorNeutralBackground1Brush}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="Border.BorderBrush" Value="{DynamicResource ColorBrandStroke1Brush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <StackPanel Orientation="Horizontal" Background="#01000000">
                        <Grid Width="16" Height="16">
                            <Ellipse x:Name="Border" Stroke="{DynamicResource ColorNeutralForeground1Brush}" StrokeThickness="1" />
                            <Ellipse x:Name="Mark" Fill="Transparent" Margin="3" />
                        </Grid>
                        <ContentPresenter Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ColorBrandForeground2Brush}" />
                            <Setter TargetName="Mark" Property="Fill" Value="{DynamicResource ColorBrandForeground2Brush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ColorNeutralForegroundDisabledBrush}" />
                            <Setter TargetName="Mark" Property="Fill" Value="Transparent" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ColorNeutralForegroundDisabledBrush}" />
                            <Setter TargetName="Mark" Property="Fill" Value="{DynamicResource ColorNeutralForegroundDisabledBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ColorNeutralForeground1HoverBrush}" />
                            <Setter TargetName="Mark" Property="Fill" Value="Transparent" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ColorBrandForeground2HoverBrush}" />
                            <Setter TargetName="Mark" Property="Fill" Value="{DynamicResource ColorBrandForeground2HoverBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ColorNeutralForeground1PressedBrush}" />
                            <Setter TargetName="Mark" Property="Fill" Value="Transparent" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource ColorBrandForeground2PressedBrush}" />
                            <Setter TargetName="Mark" Property="Fill" Value="{DynamicResource ColorBrandForeground2PressedBrush}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <StackPanel Orientation="Horizontal" Background="#01000000">
                        <Grid x:Name="Unchecked" Width="16" Height="16" Visibility="Visible">
                            <Path x:Name="UncheckedMark" Fill="{DynamicResource ColorNeutralForeground1Brush}" Data="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
                        </Grid>
                        <Grid x:Name="Checked" Width="16" Height="16" Visibility="Collapsed">
                            <Path x:Name="CheckedMark" Fill="{DynamicResource ColorNeutralForeground1Brush}" Data="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm10.03 4.97a.75.75 0 0 1 .011 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.75.75 0 0 1 1.08-.022z" />
                        </Grid>
                        <ContentPresenter Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Unchecked" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Checked" Property="Visibility" Value="Visible" />
                            <Setter TargetName="CheckedMark" Property="Fill" Value="{DynamicResource ColorBrandForeground2Brush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="UncheckedMark" Property="Fill" Value="{DynamicResource ColorNeutralForegroundDisabledBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Unchecked" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Checked" Property="Visibility" Value="Visible" />
                            <Setter TargetName="CheckedMark" Property="Fill" Value="{DynamicResource ColorNeutralForegroundDisabledBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="UncheckedMark" Property="Fill" Value="{DynamicResource ColorNeutralForeground1HoverBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Unchecked" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Checked" Property="Visibility" Value="Visible" />
                            <Setter TargetName="CheckedMark" Property="Fill" Value="{DynamicResource ColorBrandForeground2HoverBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="UncheckedMark" Property="Fill" Value="{DynamicResource ColorNeutralForeground1PressedBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Unchecked" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Checked" Property="Visibility" Value="Visible" />
                            <Setter TargetName="CheckedMark" Property="Fill" Value="{DynamicResource ColorBrandForeground2PressedBrush}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
